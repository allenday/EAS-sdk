name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.2.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Task
      uses: arduino/setup-task@v2
      with:
        version: 3.x
        
    - name: Validate version format
      run: |
        VERSION="${{ inputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.0.0 or v1.0.0-beta.1"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"
        
    - name: Check if version exists
      run: |
        if git rev-parse "${{ inputs.version }}" >/dev/null 2>&1; then
          echo "❌ Version ${{ inputs.version }} already exists as a git tag"
          exit 1
        fi
        echo "✅ Version ${{ inputs.version }} is new"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Task
      uses: arduino/setup-task@v2
      with:
        version: 3.x
        
    - name: Run pre-release checks
      run: task release:check
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
        
    - name: Extract clean version
      id: version
      run: |
        # Extract version without 'v' prefix
        CLEAN_VERSION="${{ inputs.version }}"
        CLEAN_VERSION=${CLEAN_VERSION#v}
        echo "clean=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        echo "Clean version: $CLEAN_VERSION"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ inputs.version }}
        name: Release ${{ inputs.version }}
        prerelease: ${{ inputs.prerelease }}
        generate_release_notes: true
        files: |
          dist/*.tar.gz
          dist/*.whl
        body: |
          ## EAS SDK ${{ inputs.version }}
          
          Python SDK for Ethereum Attestation Service (EAS)
          
          ### 📦 Installation
          
          **From PyPI** (recommended):
          ```bash
          pip install eas-sdk==${{ steps.version.outputs.clean }}
          ```
          
          **From wheel**:
          ```bash
          pip install ./eas_sdk-${{ steps.version.outputs.clean }}-py3-none-any.whl
          ```
          
          **From source**:
          ```bash
          pip install ./eas-sdk-${{ steps.version.outputs.clean }}.tar.gz
          ```
          
          ### 🚀 Features
          
          - Create and verify attestations on EAS
          - Multi-chain support (Ethereum, Base, Optimism, Arbitrum, Polygon, etc.)
          - Comprehensive schema management
          - Off-chain attestation support with EIP-712
          - Batch operations for gas efficiency
          - Type-safe Python API with full typing support
          
          ### 📖 Documentation
          
          - [Repository](https://github.com/allendy/EAS-sdk)
          - [Issues](https://github.com/allendy/EAS-sdk/issues)
          
          ### 🔗 Quick Start
          
          ```python
          from main.EAS import EAS
          
          # Create EAS instance for Base Sepolia testnet
          eas = EAS.from_chain("base-sepolia", private_key, from_account)
          
          # Create an attestation
          result = eas.create_attestation(
              schema_uid="0x...",
              recipient="0x...",
              data={"message": "Hello EAS!"}
          )
          
          print(f"Attestation created: {result.tx_hash}")
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
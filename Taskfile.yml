version: '3'

vars:
  PYTHON: '{{.PYTHON | default "python3"}}'
  VENV_DIR: '{{.VENV_DIR | default ".venv"}}'
  SOURCE_DIR: 'src'
  TEST_DIR: 'src/test'

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Environment setup
  install:
    desc: Install dependencies and setup development environment
    deps: [_ensure-venv]
    cmds:
      - echo "📦 Installing dependencies..."
      - '{{.VENV_DIR}}/bin/pip install -e .[dev]'
      - echo "✅ Dependencies installed successfully"

  _ensure-venv:
    desc: Ensure virtual environment exists
    status:
      - test -d {{.VENV_DIR}}
    cmds:
      - echo "🐍 Creating virtual environment..."
      - '{{.PYTHON}} -m venv {{.VENV_DIR}}'
      - '{{.VENV_DIR}}/bin/pip install --upgrade pip setuptools wheel'

  # Cleanup tasks
  clean:
    desc: Clean build artifacts, cache, and temporary files
    cmds:
      - echo "🧹 Cleaning build artifacts..."
      - rm -rf build/ dist/ *.egg-info/
      - rm -rf .pytest_cache/ .coverage htmlcov/
      - rm -rf {{.SOURCE_DIR}}/**/__pycache__/ {{.TEST_DIR}}/**/__pycache__/
      - find . -name "*.pyc" -delete
      - find . -name "*.pyo" -delete
      - find . -name "*~" -delete
      - echo "✅ Cleanup completed"

  clean-all:
    desc: Clean everything including virtual environment
    cmds:
      - task: clean
      - echo "🗑️  Removing virtual environment..."
      - rm -rf {{.VENV_DIR}}
      - echo "✅ Full cleanup completed"

  # Testing tasks
  test:unit:
    desc: Run unit tests (no network required)
    deps: [install]
    cmds:
      - echo "🧪 Running unit tests..."
      - source {{.VENV_DIR}}/bin/activate && {{.PYTHON}} test_runner.py unit

  test:integration:
    desc: Run integration tests (network required)
    deps: [install]
    cmds:
      - echo "🌐 Running integration tests..."
      - source {{.VENV_DIR}}/bin/activate && {{.PYTHON}} test_runner.py integration

  test:live:
    desc: Run live write tests (private key required)
    deps: [install]
    cmds:
      - echo "🔥 Running live write tests..."
      - source {{.VENV_DIR}}/bin/activate && {{.PYTHON}} test_runner.py live

  test:all:
    desc: Run all tests
    deps: [install]
    cmds:
      - echo "🚀 Running all tests..."
      - source {{.VENV_DIR}}/bin/activate && {{.PYTHON}} test_runner.py all

  # Alternative pytest commands for more control
  pytest:
    desc: Run pytest with custom args
    deps: [install]
    cmds:
      - source {{.VENV_DIR}}/bin/activate && {{.PYTHON}} -m pytest {{.CLI_ARGS}}

  pytest:verbose:
    desc: Run pytest with verbose output
    deps: [install]
    cmds:
      - source {{.VENV_DIR}}/bin/activate && {{.PYTHON}} -m pytest -v {{.CLI_ARGS}}

  # Code quality and linting
  check:format:
    desc: Check code formatting with black and isort
    deps: [install]
    cmds:
      - echo "🎨 Checking code formatting..."
      - source {{.VENV_DIR}}/bin/activate && black --check --diff {{.SOURCE_DIR}}
      - source {{.VENV_DIR}}/bin/activate && isort --check-only --diff {{.SOURCE_DIR}}

  check:lint:
    desc: Run linting with flake8
    deps: [install]
    cmds:
      - echo "🔍 Running linter..."
      - source {{.VENV_DIR}}/bin/activate && flake8 {{.SOURCE_DIR}}

  check:types:
    desc: Run type checking with mypy
    deps: [install]
    cmds:
      - echo "📝 Running type checker..."
      - source {{.VENV_DIR}}/bin/activate && mypy {{.SOURCE_DIR}}/main

  check:
    desc: Run all code quality checks
    deps: [install]
    cmds:
      - task: check:format
      - task: check:lint
      - task: check:types
      - echo "✅ All checks passed"

  # Formatting tasks
  format:
    desc: Auto-format code with black and isort
    deps: [install]
    cmds:
      - echo "🎨 Formatting code..."
      - source {{.VENV_DIR}}/bin/activate && black {{.SOURCE_DIR}}
      - source {{.VENV_DIR}}/bin/activate && isort {{.SOURCE_DIR}}
      - echo "✅ Code formatted"

  # Packaging tasks
  build:
    desc: Build distribution packages
    deps: [install, clean]
    cmds:
      - echo "📦 Building distribution packages..."
      - source {{.VENV_DIR}}/bin/activate && {{.PYTHON}} -m build
      - echo "✅ Build completed"
      - ls -la dist/

  package:
    desc: Build and verify packages
    deps: [build]
    cmds:
      - echo "🔍 Verifying built packages..."
      - source {{.VENV_DIR}}/bin/activate && twine check dist/*
      - echo "✅ Package verification completed"

  # Development workflow
  dev:
    desc: Setup development environment and run basic checks
    cmds:
      - task: install
      - task: format
      - task: test:unit
      - echo "🎉 Development environment ready!"

  ci:
    desc: Run full CI pipeline (format check, lint, type check, all tests)
    cmds:
      - task: check
      - task: test:all
      - echo "✅ CI pipeline completed successfully"

  # Utility tasks
  deps:
    desc: Show installed dependencies
    deps: [install]
    cmds:
      - source {{.VENV_DIR}}/bin/activate && pip list

  deps:outdated:
    desc: Show outdated dependencies
    deps: [install]
    cmds:
      - source {{.VENV_DIR}}/bin/activate && pip list --outdated

  env:
    desc: Show environment information
    deps: [_ensure-venv]
    cmds:
      - echo "🔍 Environment Information"
      - echo "Python - $({{.PYTHON}} --version)"
      - echo "Virtual Environment - {{.VENV_DIR}}"
      - echo "Source Directory - {{.SOURCE_DIR}}"
      - echo "Test Directory - {{.TEST_DIR}}"
      - source {{.VENV_DIR}}/bin/activate && echo "Pip - $(pip --version)"

  # Security and supply chain
  audit:
    desc: Run security audit on dependencies
    deps: [install]
    cmds:
      - echo "🔒 Running security audit..."
      - source {{.VENV_DIR}}/bin/activate && pip-audit || echo "⚠️  pip-audit not installed, run pip install pip-audit"

  # Documentation tasks (if needed)
  docs:build:
    desc: Build documentation (placeholder)
    cmds:
      - echo "📚 Documentation build not yet implemented"

  # Release tasks
  release:check:
    desc: Pre-release checks
    deps: [install]
    cmds:
      - echo "🚀 Running pre-release checks..."
      - task: clean
      - task: check
      - task: test:all
      - task: build
      - echo "🔍 Verifying built packages..."
      - source {{.VENV_DIR}}/bin/activate && twine check dist/*
      - echo "✅ Package verification completed"
      - echo "🚀 Ready for release!"

  # Help task
  help:
    desc: Show detailed help for common workflows
    cmds:
      - echo "📋 Common EAS SDK Development Workflows"
      - echo ""
      - echo "🚀 Getting Started"
      - echo "  task dev              - Setup development environment"
      - echo "  task install          - Install dependencies"
      - echo ""
      - echo "🧪 Testing"
      - echo "  task test:unit        - Run unit tests (fast, no network)"
      - echo "  task test:integration - Run integration tests (network required)"
      - echo "  task test:live        - Run live tests (private key required)"
      - echo "  task test:all         - Run all tests"
      - echo ""
      - echo "🔍 Code Quality"
      - echo "  task check            - Run all checks (format, lint, types)"
      - echo "  task format           - Auto-format code"
      - echo "  task check:lint       - Run linter only"
      - echo ""
      - echo "📦 Building & Packaging"
      - echo "  task build            - Build distribution packages"
      - echo "  task package          - Build and verify packages"
      - echo "  task release:check    - Full pre-release validation"
      - echo ""
      - echo "🧹 Cleanup"
      - echo "  task clean            - Clean build artifacts"
      - echo "  task clean-all        - Clean everything including venv"
      - echo ""
      - echo "🔧 Development"
      - echo "  task ci               - Run full CI pipeline"
      - echo "  task env              - Show environment info"
      - echo "  task deps             - Show installed dependencies"